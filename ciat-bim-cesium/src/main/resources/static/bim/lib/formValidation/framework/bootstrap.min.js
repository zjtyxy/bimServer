/* 2018-9-7 21:22:43 | 版权所有 国信同科 http://ciat.com.cn  【联系我们QQ：516584683，微信：ciatgis】 */
!function (i) { FormValidation.Framework.Bootstrap = function (o, t, e) { t = i.extend(!0, { button: { selector: '[type="submit"]', disabled: "disabled" }, err: { clazz: "help-block", parent: "^(.*)col-(xs|sm|md|lg)-(offset-){0,1}[0-9]+(.*)$" }, icon: { valid: null, invalid: null, validating: null, feedback: "form-control-feedback" }, row: { selector: ".form-group", valid: "has-success", invalid: "has-error", feedback: "has-feedback" } }, t), FormValidation.Base.apply(this, [o, t, e]) }, FormValidation.Framework.Bootstrap.prototype = i.extend({}, FormValidation.Base.prototype, { _fixIcon: function (o, t) { var e = this._namespace, a = o.attr("type"), r = o.attr("data-" + e + "-field"), i = this.options.fields[r].row || this.options.row.selector, s = o.closest(i); if ("checkbox" === a || "radio" === a) { var n = o.parent(); n.hasClass(a) ? t.insertAfter(n) : n.parent().hasClass(a) && t.insertAfter(n.parent()) } 0 === s.find("label").length && t.addClass("fv-icon-no-label"), 0 !== s.find(".input-group").length && t.addClass("fv-bootstrap-icon-input-group").insertAfter(s.find(".input-group").eq(0)) }, _createTooltip: function (o, t, e) { var a = this._namespace, r = o.data(a + ".icon"); if (r) switch (e) { case "popover": r.css({ cursor: "pointer", "pointer-events": "auto" }).popover("destroy").popover({ container: "body", content: t, html: !0, placement: "auto top", trigger: "hover click" }); break; case "tooltip": default: r.css({ cursor: "pointer", "pointer-events": "auto" }).tooltip("destroy").tooltip({ container: "body", html: !0, placement: "auto top", title: t }) } }, _destroyTooltip: function (o, t) { var e = this._namespace, a = o.data(e + ".icon"); if (a) switch (t) { case "popover": a.css({ cursor: "", "pointer-events": "none" }).popover("destroy"); break; case "tooltip": default: a.css({ cursor: "", "pointer-events": "none" }).tooltip("destroy") } }, _hideTooltip: function (o, t) { var e = this._namespace, a = o.data(e + ".icon"); if (a) switch (t) { case "popover": a.popover("hide"); break; case "tooltip": default: a.tooltip("hide") } }, _showTooltip: function (o, t) { var e = this._namespace, a = o.data(e + ".icon"); if (a) switch (t) { case "popover": a.popover("show"); break; case "tooltip": default: a.tooltip("show") } } }), i.fn.bootstrapValidator = function (a) { var r = arguments; return this.each(function () { var o = i(this), t = o.data("formValidation") || o.data("bootstrapValidator"), e = "object" == typeof a && a; t || (t = new FormValidation.Framework.Bootstrap(this, i.extend({}, { events: { formInit: "init.form.bv", formError: "error.form.bv", formSuccess: "success.form.bv", fieldAdded: "added.field.bv", fieldRemoved: "removed.field.bv", fieldInit: "init.field.bv", fieldError: "error.field.bv", fieldSuccess: "success.field.bv", fieldStatus: "status.field.bv", localeChanged: "changed.locale.bv", validatorError: "error.validator.bv", validatorSuccess: "success.validator.bv" } }, e), "bv"), o.addClass("fv-form-bootstrap").data("formValidation", t).data("bootstrapValidator", t)), "string" == typeof a && t[a].apply(t, Array.prototype.slice.call(r, 1)) }) }, i.fn.bootstrapValidator.Constructor = FormValidation.Framework.Bootstrap }(jQuery);