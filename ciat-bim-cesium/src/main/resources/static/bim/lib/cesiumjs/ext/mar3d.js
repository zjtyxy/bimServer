    kl8s0100.Cesium = foeq0121,
    kl8s0100.name = 'Mars3D ( MarsGIS for Cesium )三维地球框架',
    kl8s0100.website = 'http://cesium.marsgis.cn',
    kl8s0100.author = '\x20木遥',
    kl8s0100.version = etae0020.version,
    kl8s0100.update = etae0020.update,
    kl8s0100.MarsClass = hgDn0100.MarsClass,
    kl8s0100.widget = mcKx0200,
    kl8s0100.widget['BaseWidget'] = miAa0103['BaseWidget'],
    kl8s0100.createMap = iv8h0101['createMap'],
    kl8s0100.ViewerEx = fTdB0010.ViewerEx,
    kl8s0100.layer = ijoI0100,
    kl8s0100.analysi = {},
    kl8s0100.analysi.FloodByEntity = ghiX0110.FloodByEntity,
    kl8s0100.analysi['FloodByTerrain'] = rmex0101.FloodByTerrain,
    kl8s0100.analysi['Measure'] = geic0002.Measure,
    kl8s0100.analysi.MeasureVolume = fdbo0321['MeasureVolume'],
    kl8s0100.analysi.Skyline = h4zP0010.Skyline,
    kl8s0100.analysi.TerrainClip = hexg0010['TerrainClip'],
    kl8s0100.analysi.TerrainClipPlan = igll0200.TerrainClipPlan,
    kl8s0100.analysi.Underground = grkv0010.Underground,
    kl8s0100.analysi.ViewShed3D = fxh70000.ViewShed3D,
    kl8s0100.analysi.Sightline = fW4n0000.Sightline,
    kl8s0100.analysi.HeightCounterByTerrain = fuzm0111.HeightCounterByTerrain,
    kl8s0100.analysi.Slope = hcR00100['Slope'],
    kl8s0100.tiles = {},
    kl8s0100.tiles.MixedOcclusion = eQed0002['MixedOcclusion'],
    kl8s0100.tiles.TilesEditor = eufb0120.TilesEditor,
    kl8s0100.tiles.TilesClipPlan = _0x70772['TilesClipPlan'],
    kl8s0100.tiles.TilesClip = eb6Q0000['TilesClip'],
    kl8s0100.tiles.TilesFlat = iSEx0001['TilesFlat'],
    kl8s0100.tiles.TilesFlood = pgBC0000['TilesFlood'],
    kl8s0100.GltfClipPlan = eztu0001.GltfClipPlan,
    kl8s0100.FlyLine = fUf60030.FlyLine,
    kl8s0100.KeyboardType = eaLy0300.KeyboardType,
    kl8s0100.Draw = ejew0021['Draw'],
    kl8s0100.draw = {},
    kl8s0100.draw.register = ejew0021.register,
    kl8s0100.draw.attr = emux0000,
    kl8s0100.draw.event = gnge0021,
    kl8s0100.draw.tooltip = fTvf0000['message'],
    kl8s0100.draw.util = eV950000,
    kl8s0100.draw.dragger = ihkx0010,
    kl8s0100.DrawEdit = {},
    kl8s0100.DrawEdit.Base = p5ak0030.EditBase,
    kl8s0100.DrawEdit.Circle = ibkW0310['EditCircle'],
    kl8s0100.DrawEdit['Corridor'] = fKNj0001.EditCorridor,
    kl8s0100.DrawEdit.Curve = je1g0001.EditCurve,
    kl8s0100.DrawEdit['Ellipsoid'] = iqq20010.EditEllipsoid,
    kl8s0100['DrawEdit']['Point'] = m5mb0013.EditPoint,
    kl8s0100.DrawEdit['Polygon'] = fI8c0002['EditPolygon'],
    kl8s0100['DrawEdit']['PolygonEx'] = egrr0110['EditPolygonEx'],
    kl8s0100.DrawEdit.Polyline = juvl0001['EditPolyline'],
    kl8s0100.DrawEdit.PolylineVolume = hKEk0001.EditPolylineVolume,
    kl8s0100['DrawEdit'].Rectangle = iLpZ0000.EditRectangle,
    kl8s0100.DrawEdit.Wall = fowT0010.EditWall,
    kl8s0100.DrawEdit.Box = fphp0100.EditBox,
    kl8s0100.DrawEdit.Plane = hhyV0110.EditPlane,
    kl8s0100.DrawEdit.PModel = rojj0010['EditPModel'],
    kl8s0100['draw'].plotUtil = gcf70120['plotUtil'],
    kl8s0100.CircleFadeMaterial = ezNL0000['CircleFadeMaterial'],
    kl8s0100.CircleWaveMaterial = ghkr0011.CircleWaveMaterial,
    kl8s0100.CircleScanMaterial = gycv0130.CircleScanMaterial,
    kl8s0100.GroundLineFlowMaterial = hChA0000['GroundLineFlowMaterial'],
    kl8s0100['LineFlowMaterial'] = hwA60000.LineFlowMaterial,
    kl8s0100['TextMaterial'] = g6Uj0001.TextMaterial,
    kl8s0100.RectangularSensorPrimitive = emgO0120['RectangularSensorPrimitive'],
    kl8s0100['RectangularSensorGraphics'] = epoE0000.RectangularSensorGraphics,
    kl8s0100['RectangularSensorVisualizer'] = etsa0014.RectangularSensorVisualizer;
var tFmj0000 = foeq0121.DataSourceDisplay.defaultVisualizersCallback;
foeq0121.DataSourceDisplay.defaultVisualizersCallback = function (ijpc0000, h4Ke0003, mGum0001) {
    var k1Uf0001 = mGum0001.entities;
    return tFmj0000(ijpc0000, h4Ke0003, mGum0001)['concat']([new etsa0014[('RectangularSensorVisualizer')](ijpc0000, k1Uf0001)]);
},
    kl8s0100.DivPoint = hckm0001.DivPoint,
    kl8s0100.DynamicRiver = hMx10010.DynamicRiver,
    kl8s0100.water = oarx0201,
    kl8s0100.ParticleSystemEx = ipIR0000.ParticleSystemEx,
    kl8s0100.FlatBillboard = gZWp0001['FlatBillboard'],
    kl8s0100.FlatImage = iKey0010.FlatImage,
    kl8s0100.scene = {},
    kl8s0100.scene.RainFS = leNf0101.default,
    kl8s0100.scene['SnowFS'] = fvkW0100.default,
    kl8s0100.scene.FogEffect = fqlq0010['FogEffect'],
    kl8s0100.scene.InvertedScene = edui0311['InvertedScene'],
    kl8s0100.scene.SnowCover = jjov0000['SnowCover'],
    kl8s0100.ZoomNavigation = ev7s0100['ZoomNavigation'],
    kl8s0100.matrix = ivL40100,
    kl8s0100.model = e3BE0000,
    kl8s0100.point = gedT0200,
    kl8s0100.polygon = icXd0101,
    kl8s0100.polyline = iKaL0020,
    kl8s0100.pointconvert = qZyD0000,

    kl8s0100.measure = f6ch0030,
    kl8s0100.tileset = eQBz0000,
    kl8s0100.log = ijVf0101,
    kl8s0100.video = {},
    kl8s0100.video.Video3D = eBU80000.Video3D,
    kl8s0100.video['Video2D'] = edx10210.Video2D,
    kl8s0100.latlng = gedT0200,
    kl8s0100.TilesEditor = eufb0120['TilesEditor'],
    kl8s0100.Measure = geic0002.Measure,

    kl8s0100.AnimationLineMaterialProperty = hwA60000.LineFlowMaterial,
    kl8s0100.ElliposidFadeMaterialProperty = ezNL0000['CircleFadeMaterial'],
    kl8s0100.GroundPolylineFlowMaterial = hChA0000['GroundLineFlowMaterial'],
    kl8s0100.analysi.TerrainExcavate = hexg0010.TerrainClip,
    kl8s0100.analysi.TerrainFlood = rmex0101['FloodByTerrain'],
    kl8s0100.analysi.VideoShed3D = eBU80000.Video3D,
    kl8s0100.VideoShed3D = eBU80000.Video3D,
    kl8s0100.util = gfpo0010,
    kl8s0100.util.config2Entity = t9dF0000['config2Entity'],
    kl8s0100.util.getDefaultContextMenu = iTfY0010.getDefaultContextMenu,
    kl8s0100.util.createModel = e3BE0000.createModel,
    kl8s0100.util.tileset = eQBz0000,
    kl8s0100.util.terrainPolyline = iKaL0020.computeSurfaceLine,
    kl8s0100.util.hasTerrain = ijoI0100.hasTerrain,
    kl8s0100.util.getEllipsoidTerrain = ijoI0100.getEllipsoidTerrain,
    kl8s0100.util.getTerrainProvider = ijoI0100.getTerrainProvider,
    kl8s0100.util.getLinkedPointList = iKaL0020.getLinkedPointList,
    kl8s0100.util.getLength = kl8s0100.measure['getLength'],
    kl8s0100.util.getArea = kl8s0100.measure['getArea'],
    kl8s0100.util.getAreaOfTriangle = kl8s0100.measure.getAreaOfTriangle,
    kl8s0100.util.getAngle = kl8s0100.measure['getAngle'],
    kl8s0100.point.formatPositon = gedT0200.formatPosition,
    kl8s0100.point.computePolygonHeightRange = icXd0101.getHeightRange,
    kl8s0100.point.updateHeightForClampToGround = gedT0200.setPositionSurfaceHeight,
    kl8s0100.point.terrainPolyline = iKaL0020['computeSurfaceLine'];
